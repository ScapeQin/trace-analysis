import com.google.protobuf.Message

def testPlaceJoined[@specialized RealKey, T, U <: Message](into: RDD[T], values: RDD[U])
    (implicit timeOfT: TimeOf[T], timeOfU: TimeOf[U],
     insertU: Insert[T,U,RealKey],
     km: ClassManifest[RealKey], tm: ClassManifest[T], um: ClassManifest[U])
    : RDD[(RealKey, (Seq[T], Seq[U]))] = {
  type K = RealKey
  val keyedInto: RDD[(K, T)] = into.map(t => insertU.keyT(t) -> t)
  val keyedValues: RDD[(K, U)] = values.map(u => insertU.keyU(u) -> u)
  keyedInto.groupWith(keyedValues)
}

val XRATE = 1000

val usageSampleX = sampleMachinesFromUsage(XRATE, usage)
val tasksSampleX = sampleMachinesFromTasks(XRATE, tasks)
val machinesSampleX = sampleMachinesFromMachines(XRATE, machines).cache

/*
val tasksWithMachinesSample = placeJoined(tasksSample, machinesSample).cache
val usageWithTasksSample = placeJoined(usageSample, tasksSample)
val usageWithMachinesSample = placeJoined(usageWithTasksSample, machinesSample).cache
*/

// vim: ft=scala
